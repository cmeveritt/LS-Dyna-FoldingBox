/* This function generates the geometry of a Box  */
/* This piece of shit code was written by Carl - Magnus Everitt in 2020 */
/* For bugs, contact carl-magnus.everitt@ri.se */
/* Code is not optimised for speed, memory or operation */
/* Need to go through all data type definitions too! */
/* Change the way perturbation nodes are selecetd on the wider panels if using the manufacturer's joint */

define:
Float MyExpressFunc(Float tt)
{
   Float panel_w, panel_h, panel_he, crease_w, glue_w, extra;
   Float x1,x2,y1,y2;
   Int i, Edge1, Edge2, Edge3;
    char p[1024];

    
    crease_w = 2;
    panel_w  = 20;
    panel_h  = 80;
    extra    = crease_w+1;
    panel_he = panel_h+2*crease_w+extra;
    glue_w   = panel_w/3;

 ExecuteCommand("cemptymodel");

/* generate planes */   
     /* Structure of command generating planes */
     /* plane 0 0 0 1.0 0 5.0 0.0 */
     /* The first two is probably for global coordinate system and the xy plane */

    /* Generate left side  */
     x1 = -panel_w - crease_w;
     x2 = x1 + panel_w;
     sprintf(p, "%f ", x1);
     ExecuteCommand(p); 
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1,x2, 0.0, panel_h );
     ExecuteCommand(p); 

    /*left crease */
     x1 = x2;
     x2 = x1 + crease_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p); 

    /* Generate central/back side  */
     x1 = x2;
     x2 = x1 + panel_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p);

    /* Generate falps  */
     y1 = -panel_w - crease_w;
     y2 = y1 + panel_w;
     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1 , y2 );
     ExecuteCommand(p);

     y1 = y2;
     y2 = 0.0;
     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1 , y2 );
     ExecuteCommand(p);

     y1 = panel_h;
     y2 = panel_h+crease_w;
     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1 , y2 );
     ExecuteCommand(p);

     y1 = y2;
     y2 = y1 + panel_w;
     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1 , y2 );
     ExecuteCommand(p);
    
    /*Right back  crease */
     x1 = x2;
     x2 = x1 + crease_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p); 

    /* Generate right side  */
     x1 = x2;
     x2 = x1 + panel_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p); 

    /*right front crease */
     x1 = x2;
     x2 = x1 + crease_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p); 
    
    /* Generate front side  */
     x1 = x2;
     x2 = x1 + panel_w;
	   sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
     ExecuteCommand(p);

    /* Generate left part for glue */
     /*generate needed crease */
       x1 = -panel_w -crease_w;
       x2 = x1 - crease_w;
	     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, 0.0, panel_h );
       ExecuteCommand(p); 
     /* Generate the falp */
     /*Generate the lines */
       x1 = x2;
       x2 = x1 -glue_w ;
       y1 = 0;
       y2 = glue_w;     /* 45 deg angle */
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = x2;
       y1 = y2;
       y2 = panel_h -glue_w;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = x1 +glue_w;
       y1 = y2;
       y2 = y1+glue_w;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
      /*Form it into a surface */
       Edge1 = SCLGetDataCenterInt("largest_edge_id");
       Edge2 = Edge1 -1;
       Edge3 = Edge2 -1;
       sprintf(p,"nsurf 0 0 0 0 %de %d %d", Edge3, Edge2, Edge1);
       ExecuteCommand(p);

    /* Generate bottom part for glue */
     /*generate needed crease */
       x1 = 0;
       x2 = panel_w;
       y1 = - crease_w -panel_w;
       y2 = y1 - crease_w;
	     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1, y2 );
       ExecuteCommand(p); 
     /* Generate the falp */
     /*Generate the lines */
       x1 = 0;
       x2 = glue_w;
       y1 = y2;
       y2 = y1 - glue_w;     /* 45 deg angle */
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = panel_w-glue_w;
       y1 = y2;
       y2 = y1;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = x1 +glue_w;
       y1 = y2;
       y2 = y1+glue_w;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
      /*Form it into a surface */
       Edge1 = SCLGetDataCenterInt("largest_edge_id");
       Edge2 = Edge1 -1;
       Edge3 = Edge2 -1;
       sprintf(p,"nsurf 0 0 0 0 %de %d %d", Edge3, Edge2, Edge1);
       ExecuteCommand(p);

     /* Generate top part for glue */
     /*generate needed crease */
       x1 = 0;
       x2 = panel_w;
       y1 = panel_h+crease_w+panel_w;
       y2 = y1 + crease_w;
	     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1, y2 );
       ExecuteCommand(p); 
     /* Generate the falp */
     /*Generate the lines */
       x1 = 0;
       x2 = glue_w;
       y1 = y2;
       y2 = y1 + glue_w;     /* 45 deg angle */
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = panel_w-glue_w;
       y1 = y2;
       y2 = y1;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
       x1 = x2;
       x2 = x1 + glue_w;
       y1 = y2;
       y2 = y1 - glue_w;
       sprintf(p, "line param  %f %f 0.0 %f %f 0", x1,y1,x2,y2);
       ExecuteCommand(p);
      /*Form it into a surface */
       Edge1 = SCLGetDataCenterInt("largest_edge_id");
       Edge2 = Edge1 -1;
       Edge3 = Edge2 -1;
       sprintf(p,"nsurf 0 0 0 0 %de %d %d", Edge3, Edge2, Edge1);
       ExecuteCommand(p);

     /* Generate Box kompression  plates */
     /*top plate */
       x1 = -panel_w;
       x2 = 2*panel_w;
       y1 = -panel_w;
       y2 = 2*panel_w;
	     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1, y2 );
       ExecuteCommand(p); 

       sprintf(p, "occtransform rotate 0.028595 0.000000 0.000000 1.000000 0.000000 0.000000 90.0 18f");
       ExecuteCommand(p); 
       sprintf(p, "occtransform translate 0.000000 1.000000 0.000000 %f 18f",panel_he);
       ExecuteCommand(p);

      /*bottom plate */
	     sprintf(p, "plane 0 0 %f %f %f %f 0.0", x1, x2, y1, y2 );
       ExecuteCommand(p); 

       sprintf(p, "occtransform rotate 0.028595 0.000000 0.000000 1.000000 0.000000 0.000000 90.0 19f");
       ExecuteCommand(p);
       sprintf(p, "occtransform translate 0.000000 1.000000 0.000000 %f 19f",-extra);
       ExecuteCommand(p); 
       


/* Generate Mesh */
ExecuteCommand("genselect target occobject");

for (i = 1; i < 20; i=i+1){
    ExecuteCommand("occfilter clear");
    sprintf(p,"genselect occobject add occobject  %df", i);
ExecuteCommand(p);
ExecuteCommand("occmesh mesh 0, 1 0 1 2 0 0");
ExecuteCommand("occmesh accept 1 0.0001 0 1");
  }

/* Create node sets */
for (i = 1; i < 20; i=i+1){
ExecuteCommand("setnode");
ExecuteCommand("genselect target node");
ExecuteCommand("genselect clear");
sprintf(p,"genselect node add part %d/0 ", i);
ExecuteCommand(p);
sprintf(p,"setnode createset %d 1 0 0 0 0 ", i);
ExecuteCommand(p);
ExecuteCommand("genselect clear  ");
}


/*============================*/
/* Merge duplicated nodes*/
/*===========================*/

ExecuteCommand("dupnode open 1");
ExecuteCommand("genselect whole");
ExecuteCommand("dupnode showdup 0.014133");
ExecuteCommand("dupnode merge 0.014133");
ExecuteCommand("genselect clear");
ExecuteCommand("dupnode accept");
ExecuteCommand("Build Rendering data");

    
	}



}
MyExpressFunc(1.0);